#!/usr/bin/env python2

import daemon
import dhmonpinger
import grp
import json
import os
import pika
import pwd
import socket
import sys
import syslog
import yaml


def connect():
  config = yaml.safe_load(file('/etc/dhmon.yaml'))
  mq = config.get('mq', None)
  if not mq:
    raise KeyError('No "mq" key in config file /etc/dhmon.yaml')
  credentials = pika.PlainCredentials(mq['username'], mq['password'])
  connection = pika.BlockingConnection(
      pika.ConnectionParameters(mq['host'], credentials=credentials))
  return connection.channel()


def transmit_thread(sockfd):
  channel = connect()
  queue = 'dhmon:pinger:req:%s' % socket.getfqdn()
  channel.queue_declare(queue=queue, auto_delete=True)

  def consume(channel, method, properties, body):
    try:
      dhmonpinger.transmit(sockfd, body)
    except IOError, e:
      syslog.syslog(syslog.LOG_ERR, 'Got order to ping "%s", failed: %s' % (
          body, str(e)))

  channel.basic_consume(consume, queue=queue, no_ack=True)
  channel.start_consuming()


def receive_thread(sockfd):
  channel = connect()
  queue = 'dhmon:pinger:resp:%s' % socket.getfqdn()
  channel.queue_declare(queue=queue)

  try:
    while True:
      ret = dhmonpinger.receive(sockfd)
      channel.basic_publish(
          exchange='', routing_key=queue, body=json.dumps(ret))
  except Exception, e:
    syslog.syslog(syslog.LOG_ERR, 'Failed to receive ping: %s' % e)


def main():
  sockfd = dhmonpinger.create_socket()

  os.nice(-15)

  # Drop root privileges now when the socket is open
  uid = pwd.getpwnam('nobody').pw_uid
  gid = grp.getgrnam('nogroup').gr_gid
  os.setgid(gid)
  os.setuid(uid)

  if not os.fork():
    transmit_thread(sockfd)
  else:
    receive_thread(sockfd)

if __name__ == '__main__':
  if len(sys.argv) > 1 and sys.argv[1] == '-d':
    main()
  else:
    with daemon.DaemonContext():
      main()
