#!/bin/bash

### BEGIN INIT INFO
# Provides:        dhmon-snmpcollector
# Required-Start:  $network $remote_fs $syslog
# Required-Stop:   $network $remote_fs $syslog
# Default-Start:   2 3 4 5
# Default-Stop: 
# Short-Description: Start dhmon snmpcollector
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin

. /lib/lsb/init-functions

DHMON=/srv/dhmon
DHMONRUN=/var/run/dhmon
test -d $DHMON || exit 5

if [ -r /etc/default/dhmon ]; then
  . /etc/default/dhmon
fi


stage() {
  local action=$1
  local name=$2
  local script=$3
  local instances=$4

  if [[ -z "$instances" ]] || [[ "$instances" -lt "1" ]]; then
    return
  fi

  if [[ ! -z "${LIMITRESTART}" ]] && [[ "${LIMITRESTART}" != "${name}" ]]; then
    return
  fi

  if [[ "$action" == "start" ]]; then
    log_daemon_msg "Starting dhmon snmpcollector $name"
  elif [[ "$action" == "stop" ]]; then
    log_daemon_msg "Stopping dhmon snmpcollector $name"
  fi

  all_status=0
  for i in $(seq 1 $instances)
  do
    PIDFILE=$DHMONRUN/snmp.$name.$i.pid
    if [[ "$action" == "start" ]]; then
      echo -n " $i"
      start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILE \
        --startas $DHMON/src/snmpcollector/src/$script -- $PIDFILE
      ret=$?
    elif [[ "$action" == "stop" ]]; then
      echo -n " $i"
      start-stop-daemon --stop -R 10 --quiet --oknodo --pidfile $PIDFILE
      ret=$?
      rm -f $PIDFILE
    elif [[ "$action" == "status" ]]; then
      status_of_proc -p $PIDFILE "$name" "dhmon snmpcollector $name $i"
      continue
    fi

    if [ "$ret" -ne 0 ]; then
      echo -n ' (FAILED)'
      all_status=1
    fi
  done
  if [[ "$action" == "start" ]] || [[ "$action" == "stop" ]]; then
    log_end_msg $all_status
  fi
}

case $1 in
  start)
    mkdir -p $DHMONRUN
    stage 'start' 'supervisor' 'supervisor.py' "${SNMP_SUPERVISORS}"
    stage 'start' 'worker'     'snmp_worker.py' "${SNMP_WORKERS}"
    stage 'start' 'processor'  'result_processor.py' "${SNMP_PROCESSORS}"
    stage 'start' 'saver'      'result_saver.py' "${SNMP_SAVERS}"
    ;;
  stop)
    stage 'stop' 'supervisor' 'supervisor.py' "${SNMP_SUPERVISORS}"
    stage 'stop' 'worker'     'snmp_worker.py' "${SNMP_WORKERS}"
    stage 'stop' 'processor'  'result_processor.py' "${SNMP_PROCESSORS}"
    stage 'stop' 'saver'      'result_saver.py' "${SNMP_SAVERS}"
    ;;
  restart|force-reload)
    $0 stop && sleep 2 && $0 start
    ;;
  try-restart)
    if $0 status >/dev/null; then
      $0 restart
    else
      exit 0
    fi
    ;;
  reload)
    exit 3
    ;;
  status)
    stage 'status' 'supervisor' 'supervisor.py' "${SNMP_SUPERVISORS}"
    stage 'status' 'worker'     'snmp_worker.py' "${SNMP_WORKERS}"
    stage 'status' 'processor'  'result_processor.py' "${SNMP_PROCESSORS}"
    stage 'status' 'saver'      'result_saver.py' "${SNMP_SAVERS}"
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|try-restart|force-reload|status}"
    exit 2
    ;;
esac
