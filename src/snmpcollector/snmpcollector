#!/usr/bin/env python2
import logging
import logging.handlers
import multiprocessing as mp
import os
import signal
import sys
import time

from src import config
from src import result_processor
from src import result_saver
from src import snmp_worker
from src import supervisor


# Global variable to keep track of if we have been interrupted more than once
first_int = True
running = None

def main():
  global running
  config.load('/etc/snmpcollector.yaml')

  signal.signal(signal.SIGINT, signal.SIG_IGN)
  signal.signal(signal.SIGALRM, signal.SIG_IGN)
  signal.signal(signal.SIGTERM, signal.SIG_IGN)

  _supervisor = supervisor.Supervisor()

  _snmp_worker = snmp_worker.SnmpWorker(
      _supervisor.result_queue, int(config.config['snmp_workers']))

  _result_processor = result_processor.ResultProcessor(
      _snmp_worker.result_queue)

  _result_saver = result_saver.ResultSaver(
      _result_processor.result_queue, int(config.config['result_savers']))

  running = True

  with open(sys.argv[1], 'w') as pidfile:
    pidfile.write(str(os.getpid()))
    pidfile.close()

  def stop(signum, frame):
    global first_int
    global running
    if not first_int:
      logging.info('Got INT twice, exiting without cleaning up')
      sys.exit(1)

    first_int = False
    running = False
    logging.info('Stopping supervisor')
    _supervisor.stop()

    logging.info('Stopping SNMP workers')
    _snmp_worker.stop()

    logging.info('Stopping result processor')
    _result_processor.stop()

    logging.info('Stopping result saver')
    _result_saver.stop()

  signal.signal(signal.SIGALRM, _supervisor.tick)
  signal.signal(signal.SIGINT, stop)
  signal.signal(signal.SIGTERM, stop)

  while running:
    time.sleep(1)

if __name__ == "__main__":
  root = logging.getLogger()

  root.addHandler(logging.handlers.SysLogHandler('/dev/log'))
  root.setLevel(logging.INFO)

  if len(sys.argv) > 1 and sys.argv[1] == '-d':
    root.setLevel(logging.DEBUG)
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter( '%(asctime)s - %(name)s - '
        '%(levelname)s - %(message)s' )
    ch.setFormatter(formatter)
    root.addHandler(ch)
    main()
  else:
    import daemon
    with daemon.DaemonContext():
      main()
